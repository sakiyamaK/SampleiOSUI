//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `SampleTable`.
    static let sampleTable = _R.storyboard.sampleTable()
    /// Storyboard `Slide`.
    static let slide = _R.storyboard.slide()
    /// Storyboard `StackTableView`.
    static let stackTableView = _R.storyboard.stackTableView()
    /// Storyboard `Test`.
    static let test = _R.storyboard.test()
    /// Storyboard `ZoomImage`.
    static let zoomImage = _R.storyboard.zoomImage()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SampleTable", bundle: ...)`
    static func sampleTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sampleTable)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Slide", bundle: ...)`
    static func slide(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.slide)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StackTableView", bundle: ...)`
    static func stackTableView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stackTableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Test", bundle: ...)`
    static func test(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.test)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ZoomImage", bundle: ...)`
    static func zoomImage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.zoomImage)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `SplashIconW`.
    static let splashIconW = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashIconW")
    /// Image `SplashIcon`.
    static let splashIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashIcon", bundle: ..., traitCollection: ...)`
    static func splashIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashIconW", bundle: ..., traitCollection: ...)`
    static func splashIconW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashIconW, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `SampleTableViewCell`.
    static let sampleTableViewCell = _R.nib._SampleTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SampleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sampleTableViewCell) instead")
    static func sampleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sampleTableViewCell)
    }
    #endif

    static func sampleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SampleTableViewCell? {
      return R.nib.sampleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SampleTableViewCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _SampleTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SampleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SampleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SampleTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sampleTable.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try slide.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try stackTableView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try test.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try zoomImage.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sampleTable: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SampleTableViewController

      let bundle = R.hostingBundle
      let name = "SampleTable"
      let sampleTableViewController = StoryboardViewControllerResource<SampleTableViewController>(identifier: "SampleTableViewController")

      func sampleTableViewController(_: Void = ()) -> SampleTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sampleTableViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.sampleTable().sampleTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sampleTableViewController' could not be loaded from storyboard 'SampleTable' as 'SampleTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct slide: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SlideViewController

      let bundle = R.hostingBundle
      let name = "Slide"
      let slideViewController = StoryboardViewControllerResource<SlideViewController>(identifier: "SlideViewController")

      func slideViewController(_: Void = ()) -> SlideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: slideViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.slide().slideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'slideViewController' could not be loaded from storyboard 'Slide' as 'SlideViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct stackTableView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StackTableViewViewController

      let bundle = R.hostingBundle
      let name = "StackTableView"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct test: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TestViewController

      let bundle = R.hostingBundle
      let name = "Test"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct zoomImage: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ZoomImageViewController

      let bundle = R.hostingBundle
      let name = "ZoomImage"
      let zoomImageViewController = StoryboardViewControllerResource<ZoomImageViewController>(identifier: "ZoomImageViewController")

      func zoomImageViewController(_: Void = ()) -> ZoomImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: zoomImageViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.zoomImage().zoomImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'zoomImageViewController' could not be loaded from storyboard 'ZoomImage' as 'ZoomImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
